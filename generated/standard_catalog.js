/**
 * ATLAS Standard Catalog - AUTO-GENERATED
 * Generated: 2025-09-09T11:00:20.753Z
 * Version: 1.5
 *
 * ⚠️  WARNING: DO NOT EDIT THIS FILE DIRECTLY
 * Edit standard_catalog.json and run: npm run generate-catalog
 */

export const standardCatalog = {
  "metadata": {
    "version": "1.5",
    "last_updated": "2025-09-09",
    "language": "bs",
    "canonical_status_values": [
      "active",
      "planned",
      "deprecated"
    ],
    "canonical_domains": [
      "mobile",
      "fixed",
      "internet",
      "tv",
      "cloud",
      "additional",
      "security"
    ],
    "sources": [
      "BH Telecom",
      "m:tel",
      "HT Eronet",
      "existing operators analysis"
    ],
    "total_services": 27,
    "total_technologies": 23,
    "generated_at": "2025-09-09T11:00:20.753Z"
  },
  "services": [
    {
      "id": "mobile_prepaid",
      "domain": "mobile",
      "naziv": "Mobilni Prepaid",
      "naziv_en": "Mobile Prepaid",
      "opis": "Mobilne usluge na prepaid osnovu",
      "status": "active",
      "aliases": [
        "prepaid",
        "mobilni_prepaid",
        "pre-paid"
      ],
      "tags": [
        "mobile",
        "prepaid",
        "basic"
      ]
    },
    {
      "id": "mobile_postpaid",
      "domain": "mobile",
      "naziv": "Mobilni Postpaid",
      "naziv_en": "Mobile Postpaid",
      "opis": "Mobilne usluge na postpaid osnovu",
      "status": "active",
      "aliases": [
        "postpaid",
        "mobilni_postpaid",
        "post-paid"
      ],
      "tags": [
        "mobile",
        "postpaid",
        "basic"
      ]
    },
    {
      "id": "mobile_esim",
      "domain": "mobile",
      "naziv": "eSIM",
      "naziv_en": "Embedded SIM",
      "opis": "Elektronska SIM kartica",
      "status": "active",
      "aliases": [
        "esim",
        "e-sim",
        "embedded_sim"
      ],
      "tags": [
        "mobile",
        "esim",
        "digital"
      ]
    },
    {
      "id": "mobile_volte_vowifi",
      "domain": "mobile",
      "naziv": "VoLTE/VoWiFi",
      "naziv_en": "Voice over LTE/WiFi",
      "opis": "Voice over LTE i WiFi pozivi",
      "status": "active",
      "aliases": [
        "volte",
        "vowifi",
        "hd_voice"
      ],
      "tags": [
        "mobile",
        "voice",
        "hd"
      ]
    },
    {
      "id": "mobile_roaming",
      "domain": "mobile",
      "naziv": "Roaming",
      "naziv_en": "Mobile Roaming",
      "opis": "Usluge u roaming-u",
      "status": "active",
      "aliases": [
        "roaming",
        "international_roaming"
      ],
      "tags": [
        "mobile",
        "roaming",
        "international"
      ]
    },
    {
      "id": "mobile_mnp",
      "domain": "mobile",
      "naziv": "Prenos broja (MNP)",
      "naziv_en": "Mobile Number Portability",
      "opis": "Mobile Number Portability",
      "status": "active",
      "aliases": [
        "mnp",
        "number_portability",
        "prenos_broja"
      ],
      "tags": [
        "mobile",
        "mnp",
        "portability"
      ]
    },
    {
      "id": "fixed_pstn",
      "domain": "fixed",
      "naziv": "PSTN Fiksni telefon",
      "naziv_en": "PSTN Fixed Phone",
      "opis": "Klasični analogni fiksni telefon",
      "status": "active",
      "aliases": [
        "pstn",
        "fiksni",
        "analogni"
      ],
      "tags": [
        "fixed",
        "voice",
        "pstn"
      ]
    },
    {
      "id": "fixed_isdn",
      "domain": "fixed",
      "naziv": "ISDN",
      "naziv_en": "Integrated Services Digital Network",
      "opis": "Integrated Services Digital Network",
      "status": "active",
      "aliases": [
        "isdn",
        "digital_fixed"
      ],
      "tags": [
        "fixed",
        "voice",
        "digital"
      ]
    },
    {
      "id": "fixed_voip",
      "domain": "fixed",
      "naziv": "VoIP Fiksni",
      "naziv_en": "Voice over IP Fixed",
      "opis": "IP telefonija za fiksne korisnike",
      "status": "active",
      "aliases": [
        "voip",
        "ip_telephony",
        "sip"
      ],
      "tags": [
        "fixed",
        "voice",
        "ip"
      ]
    },
    {
      "id": "voice_mail",
      "domain": "fixed",
      "naziv": "Voice Mail",
      "naziv_en": "Voice Mail",
      "opis": "Govorna pošta",
      "status": "active",
      "aliases": [
        "voice_mail",
        "govorna_posta",
        "voicemail"
      ],
      "tags": [
        "fixed",
        "voice",
        "messaging"
      ]
    },
    {
      "id": "internet_ftth",
      "domain": "internet",
      "naziv": "FTTH Internet",
      "naziv_en": "Fiber to the Home",
      "opis": "Fiber to the Home internet",
      "status": "active",
      "aliases": [
        "ftth",
        "fiber",
        "optika"
      ],
      "tags": [
        "internet",
        "fiber",
        "high_speed"
      ]
    },
    {
      "id": "internet_adsl_vdsl",
      "domain": "internet",
      "naziv": "ADSL/VDSL Internet",
      "naziv_en": "ADSL/VDSL Internet",
      "opis": "Internet preko bakarnih linija",
      "status": "active",
      "aliases": [
        "adsl",
        "vdsl",
        "xdsl"
      ],
      "tags": [
        "internet",
        "copper",
        "dsl"
      ]
    },
    {
      "id": "internet_mobile",
      "domain": "internet",
      "naziv": "Mobilni Internet",
      "naziv_en": "Mobile Internet",
      "opis": "Internet preko mobilne mreže",
      "status": "active",
      "aliases": [
        "mobile_internet",
        "3g_4g_internet"
      ],
      "tags": [
        "internet",
        "mobile",
        "wireless"
      ]
    },
    {
      "id": "dedicated_internet",
      "domain": "internet",
      "naziv": "Poslovni Internet",
      "naziv_en": "Business Internet",
      "opis": "Dedicirani internet za poslovne korisnike",
      "status": "active",
      "aliases": [
        "business_internet",
        "dedicated",
        "poslovni"
      ],
      "tags": [
        "internet",
        "business",
        "dedicated"
      ]
    },
    {
      "id": "internet_fixed_wireless",
      "domain": "internet",
      "naziv": "Fixed Wireless Internet",
      "naziv_en": "Fixed Wireless Access",
      "opis": "Bežični internet sa fiksnom instalacijom",
      "status": "active",
      "aliases": [
        "fwa",
        "fixed_wireless",
        "wifi_internet"
      ],
      "tags": [
        "internet",
        "wireless",
        "fixed"
      ]
    },
    {
      "id": "iptv",
      "domain": "tv",
      "naziv": "IPTV",
      "naziv_en": "Internet Protocol Television",
      "opis": "TV preko IP mreže",
      "status": "active",
      "aliases": [
        "iptv",
        "ip_tv",
        "internet_tv"
      ],
      "tags": [
        "tv",
        "ip",
        "streaming"
      ]
    },
    {
      "id": "satellite_tv",
      "domain": "tv",
      "naziv": "Satelitska TV",
      "naziv_en": "Satellite TV",
      "opis": "TV preko satelita",
      "status": "active",
      "aliases": [
        "satellite_tv",
        "sat_tv",
        "satelitska"
      ],
      "tags": [
        "tv",
        "satellite",
        "broadcast"
      ]
    },
    {
      "id": "cloud_hosting",
      "domain": "cloud",
      "naziv": "Cloud Hosting",
      "naziv_en": "Cloud Hosting",
      "opis": "Hosting usluge u oblaku",
      "status": "active",
      "aliases": [
        "hosting",
        "cloud_hosting",
        "web_hosting"
      ],
      "tags": [
        "cloud",
        "hosting",
        "business"
      ]
    },
    {
      "id": "cloud_backup",
      "domain": "cloud",
      "naziv": "Cloud Backup",
      "naziv_en": "Cloud Backup",
      "opis": "Backup servisi u oblaku",
      "status": "active",
      "aliases": [
        "backup",
        "cloud_backup",
        "data_backup"
      ],
      "tags": [
        "cloud",
        "backup",
        "storage"
      ]
    },
    {
      "id": "data_center",
      "domain": "cloud",
      "naziv": "Data Center",
      "naziv_en": "Data Center Services",
      "opis": "Data center usluge",
      "status": "active",
      "aliases": [
        "datacenter",
        "data_center",
        "colocation"
      ],
      "tags": [
        "cloud",
        "datacenter",
        "infrastructure"
      ]
    },
    {
      "id": "office365",
      "domain": "cloud",
      "naziv": "Office 365",
      "naziv_en": "Microsoft Office 365",
      "opis": "Microsoft Office 365 servisi",
      "status": "active",
      "aliases": [
        "office365",
        "microsoft365",
        "o365"
      ],
      "tags": [
        "cloud",
        "productivity",
        "microsoft"
      ]
    },
    {
      "id": "smart_city",
      "domain": "cloud",
      "naziv": "Smart City",
      "naziv_en": "Smart City Solutions",
      "opis": "Pametni grad rešenja",
      "status": "active",
      "aliases": [
        "smart_city",
        "pametni_grad",
        "iot_city"
      ],
      "tags": [
        "cloud",
        "iot",
        "smart"
      ]
    },
    {
      "id": "smart_home",
      "domain": "cloud",
      "naziv": "Smart Home",
      "naziv_en": "Smart Home Solutions",
      "opis": "Pametni dom rešenja",
      "status": "active",
      "aliases": [
        "smart_home",
        "pametni_dom",
        "home_automation"
      ],
      "tags": [
        "cloud",
        "iot",
        "home"
      ]
    },
    {
      "id": "digital_signature",
      "domain": "cloud",
      "naziv": "Digitalni potpis",
      "naziv_en": "Digital Signature",
      "opis": "Digitalna sertifikacija",
      "status": "active",
      "aliases": [
        "digital_signature",
        "digitalni_potpis",
        "certificate"
      ],
      "tags": [
        "cloud",
        "security",
        "certificate"
      ]
    },
    {
      "id": "device_sales",
      "domain": "additional",
      "naziv": "Prodaja uređaja",
      "naziv_en": "Device Sales",
      "opis": "Prodaja telekom opreme",
      "status": "active",
      "aliases": [
        "device_sales",
        "prodaja_uredjaja",
        "equipment"
      ],
      "tags": [
        "additional",
        "sales",
        "hardware"
      ]
    },
    {
      "id": "router_sales",
      "domain": "additional",
      "naziv": "Prodaja rutera",
      "naziv_en": "Router Sales",
      "opis": "Prodaja mrežne opreme",
      "status": "active",
      "aliases": [
        "router_sales",
        "prodaja_rutera",
        "network_equipment"
      ],
      "tags": [
        "additional",
        "sales",
        "networking"
      ]
    },
    {
      "id": "system_integration",
      "domain": "additional",
      "naziv": "Sistemska integracija",
      "naziv_en": "System Integration",
      "opis": "IT sistemi i integracija",
      "status": "active",
      "aliases": [
        "system_integration",
        "sistemska_integracija",
        "it_integration"
      ],
      "tags": [
        "additional",
        "integration",
        "it"
      ]
    }
  ],
  "technologies": [
    {
      "id": "tech_2g",
      "domain": "access",
      "tip": "wireless",
      "naziv": "2G/GSM",
      "naziv_en": "Global System for Mobile",
      "opis": "Druga generacija mobilnih mreža",
      "status": "active",
      "aliases": [
        "2g",
        "gsm",
        "second_generation"
      ],
      "tags": [
        "mobile",
        "2g",
        "legacy"
      ],
      "capacity": "64 kbps"
    },
    {
      "id": "tech_3g",
      "domain": "access",
      "tip": "wireless",
      "naziv": "3G/UMTS",
      "naziv_en": "Universal Mobile Telecommunications System",
      "opis": "Treća generacija mobilnih mreža",
      "status": "active",
      "aliases": [
        "3g",
        "umts",
        "third_generation"
      ],
      "tags": [
        "mobile",
        "3g",
        "data"
      ],
      "capacity": "2 Mbps"
    },
    {
      "id": "tech_4g",
      "domain": "access",
      "tip": "wireless",
      "naziv": "4G/LTE",
      "naziv_en": "Long Term Evolution",
      "opis": "Četvrta generacija - LTE",
      "status": "active",
      "aliases": [
        "4g",
        "lte",
        "fourth_generation"
      ],
      "tags": [
        "mobile",
        "4g",
        "broadband"
      ],
      "capacity": "150 Mbps"
    },
    {
      "id": "tech_5g_ready",
      "domain": "access",
      "tip": "wireless",
      "naziv": "5G Ready",
      "naziv_en": "5G Ready Infrastructure",
      "opis": "Priprema za 5G mrežu",
      "status": "planned",
      "aliases": [
        "5g_ready",
        "5g_preparation"
      ],
      "tags": [
        "mobile",
        "5g",
        "future"
      ],
      "capacity": "1 Gbps"
    },
    {
      "id": "tech_volte",
      "domain": "core",
      "tip": "voice",
      "naziv": "VoLTE",
      "naziv_en": "Voice over LTE",
      "opis": "Voice over LTE tehnologija",
      "status": "active",
      "aliases": [
        "volte",
        "voice_over_lte"
      ],
      "tags": [
        "mobile",
        "voice",
        "4g"
      ],
      "capacity": "HD Voice"
    },
    {
      "id": "tech_vowifi",
      "domain": "core",
      "tip": "voice",
      "naziv": "VoWiFi",
      "naziv_en": "Voice over WiFi",
      "opis": "Voice over WiFi tehnologija",
      "status": "active",
      "aliases": [
        "vowifi",
        "voice_over_wifi"
      ],
      "tags": [
        "mobile",
        "voice",
        "wifi"
      ],
      "capacity": "HD Voice"
    },
    {
      "id": "tech_hlr_hss",
      "domain": "core",
      "tip": "database",
      "naziv": "HLR/HSS",
      "naziv_en": "Home Location Register/Home Subscriber Server",
      "opis": "Home Location Register/Home Subscriber Server",
      "status": "active",
      "aliases": [
        "hlr",
        "hss",
        "subscriber_database"
      ],
      "tags": [
        "mobile",
        "core",
        "database"
      ],
      "capacity": "Centralna baza"
    },
    {
      "id": "tech_eir",
      "domain": "core",
      "tip": "database",
      "naziv": "EIR",
      "naziv_en": "Equipment Identity Register",
      "opis": "Equipment Identity Register",
      "status": "active",
      "aliases": [
        "eir",
        "equipment_register"
      ],
      "tags": [
        "mobile",
        "core",
        "security"
      ],
      "capacity": "IMEI baza"
    },
    {
      "id": "tech_smsc_mmsc",
      "domain": "core",
      "tip": "messaging",
      "naziv": "SMSC/MMSC",
      "naziv_en": "SMS/MMS Message Center",
      "opis": "SMS/MMS Message Center",
      "status": "active",
      "aliases": [
        "smsc",
        "mmsc",
        "message_center"
      ],
      "tags": [
        "mobile",
        "messaging",
        "sms"
      ],
      "capacity": "Messaging"
    },
    {
      "id": "tech_pstn",
      "domain": "access",
      "tip": "fixed",
      "naziv": "PSTN",
      "naziv_en": "Public Switched Telephone Network",
      "opis": "Public Switched Telephone Network",
      "status": "active",
      "aliases": [
        "pstn",
        "fixed_line",
        "analog"
      ],
      "tags": [
        "fixed",
        "voice",
        "legacy"
      ],
      "capacity": "64 kbps"
    },
    {
      "id": "tech_isdn",
      "domain": "access",
      "tip": "fixed",
      "naziv": "ISDN",
      "naziv_en": "Integrated Services Digital Network",
      "opis": "Integrated Services Digital Network",
      "status": "active",
      "aliases": [
        "isdn",
        "digital_fixed"
      ],
      "tags": [
        "fixed",
        "voice",
        "digital"
      ],
      "capacity": "128 kbps"
    },
    {
      "id": "tech_voip_fixed",
      "domain": "core",
      "tip": "voice",
      "naziv": "VoIP Fiksni",
      "naziv_en": "Voice over IP Fixed",
      "opis": "Voice over IP za fiksne linije",
      "status": "active",
      "aliases": [
        "voip_fixed",
        "sip_fixed"
      ],
      "tags": [
        "fixed",
        "voice",
        "ip"
      ],
      "capacity": "Skalabilno"
    },
    {
      "id": "tech_ims_fixed",
      "domain": "core",
      "tip": "platform",
      "naziv": "IMS Fiksni",
      "naziv_en": "IP Multimedia Subsystem Fixed",
      "opis": "IP Multimedia Subsystem za fiksne",
      "status": "active",
      "aliases": [
        "ims_fixed",
        "multimedia_subsystem"
      ],
      "tags": [
        "fixed",
        "multimedia",
        "ip"
      ],
      "capacity": "Skalabilno"
    },
    {
      "id": "tech_ftth_fttb",
      "domain": "access",
      "tip": "optical",
      "naziv": "FTTH/FTTB",
      "naziv_en": "Fiber to the Home/Building",
      "opis": "Fiber to the Home/Building",
      "status": "active",
      "aliases": [
        "ftth",
        "fttb",
        "fiber"
      ],
      "tags": [
        "internet",
        "fiber",
        "high_speed"
      ],
      "capacity": "1 Gbps"
    },
    {
      "id": "tech_xdsl",
      "domain": "access",
      "tip": "copper",
      "naziv": "xDSL",
      "naziv_en": "Digital Subscriber Line family",
      "opis": "Digital Subscriber Line familija",
      "status": "active",
      "aliases": [
        "xdsl",
        "adsl",
        "vdsl"
      ],
      "tags": [
        "internet",
        "copper",
        "broadband"
      ],
      "capacity": "100 Mbps"
    },
    {
      "id": "tech_docsis",
      "domain": "access",
      "tip": "cable",
      "naziv": "DOCSIS",
      "naziv_en": "Data Over Cable Service Interface Specification",
      "opis": "Cable modem tehnologija",
      "status": "active",
      "aliases": [
        "docsis",
        "cable_modem"
      ],
      "tags": [
        "internet",
        "cable",
        "broadband"
      ],
      "capacity": "500 Mbps"
    },
    {
      "id": "tech_ipv6",
      "domain": "core",
      "tip": "protocol",
      "naziv": "IPv6",
      "naziv_en": "Internet Protocol version 6",
      "opis": "Internet Protocol version 6",
      "status": "active",
      "aliases": [
        "ipv6",
        "internet_protocol_v6"
      ],
      "tags": [
        "internet",
        "protocol",
        "future"
      ],
      "capacity": "Unlimited"
    },
    {
      "id": "tech_cgnat",
      "domain": "core",
      "tip": "nat",
      "naziv": "CG-NAT",
      "naziv_en": "Carrier Grade Network Address Translation",
      "opis": "Carrier Grade Network Address Translation",
      "status": "active",
      "aliases": [
        "cgnat",
        "carrier_nat",
        "nat444"
      ],
      "tags": [
        "internet",
        "nat",
        "ipv4"
      ],
      "capacity": "100 Gbps"
    },
    {
      "id": "tech_mpls",
      "domain": "transport",
      "tip": "switching",
      "naziv": "MPLS",
      "naziv_en": "Multiprotocol Label Switching",
      "opis": "Multiprotocol Label Switching",
      "status": "active",
      "aliases": [
        "mpls",
        "label_switching"
      ],
      "tags": [
        "transport",
        "mpls",
        "business"
      ],
      "capacity": "10 Gbps"
    },
    {
      "id": "tech_sdwan",
      "domain": "transport",
      "tip": "overlay",
      "naziv": "SD-WAN",
      "naziv_en": "Software Defined WAN",
      "opis": "Software Defined WAN",
      "status": "active",
      "aliases": [
        "sdwan",
        "software_wan"
      ],
      "tags": [
        "transport",
        "software",
        "business"
      ],
      "capacity": "Skalabilno"
    },
    {
      "id": "tech_cdn",
      "domain": "core",
      "tip": "delivery",
      "naziv": "CDN",
      "naziv_en": "Content Delivery Network",
      "opis": "Content Delivery Network",
      "status": "active",
      "aliases": [
        "cdn",
        "content_delivery"
      ],
      "tags": [
        "internet",
        "content",
        "performance"
      ],
      "capacity": "Multi-Gbps"
    },
    {
      "id": "tech_fixed_wireless",
      "domain": "access",
      "tip": "wireless",
      "naziv": "Fixed Wireless",
      "naziv_en": "Fixed Wireless Access",
      "opis": "Bežična pristupna tehnologija",
      "status": "active",
      "aliases": [
        "fixed_wireless",
        "fwa",
        "wireless_access"
      ],
      "tags": [
        "internet",
        "wireless",
        "access"
      ],
      "capacity": "100 Mbps"
    },
    {
      "id": "tech_ipv4",
      "domain": "core",
      "tip": "protocol",
      "naziv": "IPv4",
      "naziv_en": "Internet Protocol version 4",
      "opis": "Internet Protocol version 4",
      "status": "active",
      "aliases": [
        "ipv4",
        "internet_protocol_v4"
      ],
      "tags": [
        "internet",
        "protocol",
        "legacy"
      ],
      "capacity": "Limited"
    }
  ]
};

// Legacy compatibility wrapper
export function getStandardServicesAndTechnologies() {
  return {
    standardServices: standardCatalog.services,
    standardTechnologies: standardCatalog.technologies
  };
}

// Enhanced utility functions
export const catalogUtils = {
  // Basic getters
  getServiceById: (id) => standardCatalog.services.find(s => s.id === id),
  getTechnologyById: (id) => standardCatalog.technologies.find(t => t.id === id),
  getServicesByDomain: (domain) => standardCatalog.services.filter(s => s.domain === domain),
  getTechnologiesByDomain: (domain) => standardCatalog.technologies.filter(t => t.domain === domain),

  // Status helpers
  getActiveServices: () => standardCatalog.services.filter(s => s.status === 'active'),
  getActiveTechnologies: () => standardCatalog.technologies.filter(t => t.status === 'active'),
  getDeprecatedItems: () => [
    ...standardCatalog.services.filter(s => s.status === 'deprecated'),
    ...standardCatalog.technologies.filter(t => t.status === 'deprecated')
  ],

  // Advanced fuzzy matching with caching
  _matchCache: new Map(),

  fuzzyMatchService: (query) => {
    if (!query || typeof query !== 'string') return [];

    const cacheKey = `service_${query.toLowerCase().trim()}`;
    if (catalogUtils._matchCache.has(cacheKey)) {
      return catalogUtils._matchCache.get(cacheKey);
    }

    const normalized = query.toLowerCase().trim();
    const matches = [];

    standardCatalog.services.forEach(service => {
      let score = 0;
      let matchType = 'none';

      // Exact ID match (highest priority)
      if (service.id === normalized.replace(/[^a-z0-9]/g, '_')) {
        score = 100;
        matchType = 'exact_id';
      }
      // Exact naziv match
      else if (service.naziv.toLowerCase() === normalized) {
        score = 95;
        matchType = 'exact_name';
      }
      // Alias match
      else if (service.aliases && service.aliases.some(alias =>
        alias.toLowerCase() === normalized)) {
        score = 90;
        matchType = 'alias';
      }
      // Regex match
      else if (service.match_regex) {
        try {
          const regex = new RegExp(service.match_regex, 'i');
          if (regex.test(query)) {
            score = 85;
            matchType = 'regex';
          }
        } catch (e) {
          // Invalid regex, skip
        }
      }
      // Partial naziv match
      else if (service.naziv.toLowerCase().includes(normalized)) {
        score = Math.max(70, 70 + (normalized.length / service.naziv.length) * 10);
        matchType = 'partial_name';
      }
      // Tag match
      else if (service.tags && service.tags.some(tag =>
        tag.toLowerCase().includes(normalized))) {
        score = 60;
        matchType = 'tag';
      }
      // Token overlap
      else {
        const serviceTokens = service.naziv.toLowerCase().split(/\s+/);
        const queryTokens = normalized.split(/\s+/);
        const overlap = serviceTokens.filter(t => queryTokens.includes(t));
        if (overlap.length > 0) {
          const overlapRatio = overlap.length / Math.max(serviceTokens.length, queryTokens.length);
          score = Math.floor(overlapRatio * 50);
          matchType = 'token_overlap';
        }
      }

      if (score > 0) {
        matches.push({
          service,
          score,
          confidence: score >= 85 ? 'high' : score >= 70 ? 'medium' : 'low',
          matchType
        });
      }
    });

    const sortedMatches = matches.sort((a, b) => b.score - a.score);
    catalogUtils._matchCache.set(cacheKey, sortedMatches);
    return sortedMatches;
  },

  fuzzyMatchTechnology: (query) => {
    if (!query || typeof query !== 'string') return [];

    const cacheKey = `tech_${query.toLowerCase().trim()}`;
    if (catalogUtils._matchCache.has(cacheKey)) {
      return catalogUtils._matchCache.get(cacheKey);
    }

    const normalized = query.toLowerCase().trim();
    const matches = [];

    standardCatalog.technologies.forEach(tech => {
      let score = 0;
      let matchType = 'none';

      // Exact ID match
      if (tech.id === normalized.replace(/[^a-z0-9]/g, '_')) {
        score = 100;
        matchType = 'exact_id';
      }
      // Exact naziv match
      else if (tech.naziv.toLowerCase() === normalized) {
        score = 95;
        matchType = 'exact_name';
      }
      // Alias match
      else if (tech.aliases && tech.aliases.some(alias =>
        alias.toLowerCase() === normalized)) {
        score = 90;
        matchType = 'alias';
      }
      // Regex match
      else if (tech.match_regex) {
        try {
          const regex = new RegExp(tech.match_regex, 'i');
          if (regex.test(query)) {
            score = 85;
            matchType = 'regex';
          }
        } catch (e) {
          // Invalid regex, skip
        }
      }
      // Partial naziv match
      else if (tech.naziv.toLowerCase().includes(normalized)) {
        score = Math.max(70, 70 + (normalized.length / tech.naziv.length) * 10);
        matchType = 'partial_name';
      }
      // Tag match
      else if (tech.tags && tech.tags.some(tag =>
        tag.toLowerCase().includes(normalized))) {
        score = 60;
        matchType = 'tag';
      }

      if (score > 0) {
        matches.push({
          technology: tech,
          score,
          confidence: score >= 85 ? 'high' : score >= 70 ? 'medium' : 'low',
          matchType
        });
      }
    });

    const sortedMatches = matches.sort((a, b) => b.score - a.score);
    catalogUtils._matchCache.set(cacheKey, sortedMatches);
    return sortedMatches;
  },

  // Batch matching for operator validation
  validateOperatorData: (operatorServices, operatorTechnologies) => {
    const results = {
      services: { matched: [], missing: [], suggestions: [] },
      technologies: { matched: [], missing: [], suggestions: [] },
      summary: { totalServices: 0, matchedServices: 0, totalTechnologies: 0, matchedTechnologies: 0 }
    };

    // Validate services
    if (operatorServices && Array.isArray(operatorServices)) {
      results.summary.totalServices = operatorServices.length;
      operatorServices.forEach(service => {
        const matches = catalogUtils.fuzzyMatchService(service.naziv);
        if (matches.length > 0 && matches[0].score >= 80) {
          results.services.matched.push({
            operator: service,
            catalog: matches[0].service,
            score: matches[0].score,
            confidence: matches[0].confidence,
            matchType: matches[0].matchType
          });
          results.summary.matchedServices++;
        } else {
          results.services.missing.push(service);
          if (matches.length > 0) {
            results.services.suggestions.push({
              operator: service,
              suggestions: matches.slice(0, 3)
            });
          }
        }
      });
    }

    // Validate technologies
    if (operatorTechnologies && Array.isArray(operatorTechnologies)) {
      results.summary.totalTechnologies = operatorTechnologies.length;
      operatorTechnologies.forEach(tech => {
        const matches = catalogUtils.fuzzyMatchTechnology(tech.naziv);
        if (matches.length > 0 && matches[0].score >= 80) {
          results.technologies.matched.push({
            operator: tech,
            catalog: matches[0].technology,
            score: matches[0].score,
            confidence: matches[0].confidence,
            matchType: matches[0].matchType
          });
          results.summary.matchedTechnologies++;
        } else {
          results.technologies.missing.push(tech);
          if (matches.length > 0) {
            results.technologies.suggestions.push({
              operator: tech,
              suggestions: matches.slice(0, 3)
            });
          }
        }
      });
    }

    return results;
  },

  // Deprecation helpers
  getDeprecatedReplacements: () => {
    const replacements = [];

    standardCatalog.services.forEach(service => {
      if (service.status === 'deprecated' && service.replacement_id) {
        const replacement = catalogUtils.getServiceById(service.replacement_id);
        if (replacement) {
          replacements.push({
            deprecated: service,
            replacement: replacement
          });
        }
      }
    });

    standardCatalog.technologies.forEach(tech => {
      if (tech.status === 'deprecated' && tech.replacement_id) {
        const replacement = catalogUtils.getTechnologyById(tech.replacement_id);
        if (replacement) {
          replacements.push({
            deprecated: tech,
            replacement: replacement
          });
        }
      }
    });

    return replacements;
  },

  // Localization helpers
  getDisplayStatus: (status) => {
    const statusMap = {
      'active': 'Aktivna',
      'planned': 'Planirana',
      'deprecated': 'Ukinuta'
    };
    return statusMap[status] || status;
  },

  getDisplayDomain: (domain) => {
    const domainMap = {
      'mobile': 'Mobilni',
      'fixed': 'Fiksni',
      'internet': 'Internet',
      'tv': 'Televizija',
      'cloud': 'Cloud',
      'additional': 'Dodatno',
      'security': 'Bezbednost',
      // Technology domains
      'access': 'Pristupna',
      'core': 'Core',
      'transport': 'Transportna'
    };
    return domainMap[domain] || domain;
  },

  // Search and filter helpers
  searchServices: (query, filters = {}) => {
    let results = standardCatalog.services;

    // Apply text search
    if (query) {
      const matches = catalogUtils.fuzzyMatchService(query);
      const matchedIds = matches.map(m => m.service.id);
      results = results.filter(s => matchedIds.includes(s.id));
    }

    // Apply filters
    if (filters.domain) {
      results = results.filter(s => s.domain === filters.domain);
    }
    if (filters.status) {
      results = results.filter(s => s.status === filters.status);
    }
    if (filters.tags && filters.tags.length > 0) {
      results = results.filter(s =>
        s.tags && filters.tags.some(tag => s.tags.includes(tag))
      );
    }

    return results;
  },

  searchTechnologies: (query, filters = {}) => {
    let results = standardCatalog.technologies;

    // Apply text search
    if (query) {
      const matches = catalogUtils.fuzzyMatchTechnology(query);
      const matchedIds = matches.map(m => m.technology.id);
      results = results.filter(t => matchedIds.includes(t.id));
    }

    // Apply filters
    if (filters.domain) {
      results = results.filter(t => t.domain === filters.domain);
    }
    if (filters.tip) {
      results = results.filter(t => t.tip === filters.tip);
    }
    if (filters.status) {
      results = results.filter(t => t.status === filters.status);
    }

    return results;
  },

  // Statistics
  getStatistics: () => {
    return {
      metadata: standardCatalog.metadata,
      services: {
        total: standardCatalog.services.length,
        byDomain: standardCatalog.services.reduce((acc, s) => {
          acc[s.domain] = (acc[s.domain] || 0) + 1;
          return acc;
        }, {}),
        byStatus: standardCatalog.services.reduce((acc, s) => {
          acc[s.status] = (acc[s.status] || 0) + 1;
          return acc;
        }, {}),
        withAliases: standardCatalog.services.filter(s => s.aliases && s.aliases.length > 0).length,
        withRegex: standardCatalog.services.filter(s => s.match_regex).length
      },
      technologies: {
        total: standardCatalog.technologies.length,
        byDomain: standardCatalog.technologies.reduce((acc, t) => {
          acc[t.domain] = (acc[t.domain] || 0) + 1;
          return acc;
        }, {}),
        byStatus: standardCatalog.technologies.reduce((acc, t) => {
          acc[t.status] = (acc[t.status] || 0) + 1;
          return acc;
        }, {}),
        byType: standardCatalog.technologies.reduce((acc, t) => {
          acc[t.tip] = (acc[t.tip] || 0) + 1;
          return acc;
        }, {}),
        withAliases: standardCatalog.technologies.filter(t => t.aliases && t.aliases.length > 0).length,
        withRegex: standardCatalog.technologies.filter(t => t.match_regex).length
      }
    };
  }
};
